colnames(dataset)[4] = "20th"
# Data shift
shifted_dataset = dataset
shifted_dataset = shift.column(data=shifted_dataset, columns="20th",len = 1, up = FALSE,newNames = sprintf("t_1", "20th"))
shifted_dataset = shift.column(data=shifted_dataset, columns="20th",len = 2, up = FALSE,newNames = sprintf("t_2", "20th"))
shifted_dataset = shift.column(data=shifted_dataset, columns="20th",len = 3, up = FALSE,newNames = sprintf("t_3", "20th"))
shifted_dataset = shift.column(data=shifted_dataset, columns="20th",len = 4, up = FALSE,newNames = sprintf("t_4", "20th"))
shifted_dataset = shift.column(data=shifted_dataset, columns="20th",len = 7, up = FALSE,newNames = sprintf("t_7", "20th"))
# normalization
uow_data_scaled = as.data.frame(shifted_dataset %>% mutate_at(vars(-date), scale, center=T))
# Split the dataset
set.seed(123)
split = sample.split(shifted_dataset$date, SplitRatio = 0.8)
training_set = subset(shifted_dataset, split == TRUE)
test_set = subset(shifted_dataset, split == FALSE)
#remove date column from dataset
training_set = training_set[-1]
test_set = test_set[-1]
# Create NN model list
model = list()
formula = `20th`~t_1 + t_2 + t_3 + t_4 + t_7
time_begin = Sys.time()
model[[1]] <- neuralnet(formula,
data = training_set,
hidden = c(50),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_1 = time_stop - time_begin
time_begin = Sys.time()
model[[2]] <- neuralnet(formula,
data = training_set,
hidden = c(100),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_2 = time_stop - time_begin
time_begin = Sys.time()
model[[3]] <- neuralnet(formula,
data = training_set,
hidden = c(150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_3 = time_stop - time_begin
time_begin = Sys.time()
model[[4]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 50),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_4 = time_stop - time_begin
time_begin = Sys.time()
model[[5]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 100 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_5 = time_stop - time_begin
time_begin = Sys.time()
model[[6]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_6 = time_stop - time_begin
time_begin = Sys.time()
model[[7]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 50, 50 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_7 = time_stop - time_begin
time_begin = Sys.time()
model[[8]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 100, 50 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_8 = time_stop - time_begin
time_begin = Sys.time()
model[[9]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 100, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_9 = time_stop - time_begin
time_begin = Sys.time()
model[[10]] <- neuralnet(formula,
data = training_set,
hidden = c(100, 100, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_10 = time_stop - time_begin
time_begin = Sys.time()
model[[11]] <- neuralnet(formula,
data = training_set,
hidden = c(50, 150, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_11 = time_stop - time_begin
time_begin = Sys.time()
model[[12]] <- neuralnet(formula,
data = training_set,
hidden = c(100, 100, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_12 = time_stop - time_begin
time_begin = Sys.time()
model[[13]] <- neuralnet(formula,
data = training_set,
hidden = c(100, 150, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_13 = time_stop - time_begin
time_begin = Sys.time()
model[[14]] <- neuralnet(formula,
data = training_set,
hidden = c(150, 150, 150 ),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time_stop = Sys.time()
train_time_14 = time_stop - time_begin
score = sapply(model,function(x) {min(x$result.matrix[c("error"),])})
cat("Training score with `20th`~t_1 + t_2 + t_3 + t_4 + t_7 \n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ",
"1 Hiddent layer with 100 hidden neurons: ",
"1 Hiddent layer with 150 hidden neurons: ",
"2 Hiddent layer with 50 and 50 hidden neurons: ",
"2 Hiddent layer with 50 and 100 hidden neurons: ",
"2 Hiddent layer with 50 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: "),
score,
collapse = "\n"))
cat("\n")
cat("Training times \n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ", train_time_1,"\n",
"1 Hiddent layer with 100 hidden neurons: ", train_time_2,"\n",
"1 Hiddent layer with 150 hidden neurons: ", train_time_3, "\n",
"2 Hiddent layer with 50 and 50 hidden neurons: ", train_time_4, "\n",
"2 Hiddent layer with 50 and 100 hidden neurons: ", train_time_5, "\n",
"2 Hiddent layer with 50 and 150 hidden neurons: ", train_time_6, "\n",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ", train_time_7, "\n",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ", train_time_8, "\n",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ", train_time_9, "\n",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ", train_time_10, "\n",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ", train_time_11, "\n",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ", train_time_12, "\n",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",train_time_13, "\n",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: ", train_time_14),
collapse = ""))
cat("\n")
predct = lapply(model, function(x) predict(x, test_set))
score = sapply(predct, function(x){
rmse(test_set$`20th`, x)
})
mae = sapply(predct, function(x){
mae(test_set$`20th`, x)
})
mape = sapply(predct, function(x){
mape(test_set$`20th`, x)
})
smape <- sapply(predct, function(x){
smape(test_set$`20th`, x)
})
cat("RMSE:\n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ",
"1 Hiddent layer with 100 hidden neurons: ",
"1 Hiddent layer with 150 hidden neurons: ",
"2 Hiddent layer with 50 and 50 hidden neurons: ",
"2 Hiddent layer with 50 and 100 hidden neurons: ",
"2 Hiddent layer with 50 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: "),
score,
collapse = "\n"))
cat("\n")
cat("MAE:\n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ",
"1 Hiddent layer with 100 hidden neurons: ",
"1 Hiddent layer with 150 hidden neurons: ",
"2 Hiddent layer with 50 and 50 hidden neurons: ",
"2 Hiddent layer with 50 and 100 hidden neurons: ",
"2 Hiddent layer with 50 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: "),
mae,
collapse = "\n"))
cat("\n")
cat("MAPE:\n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ",
"1 Hiddent layer with 100 hidden neurons: ",
"1 Hiddent layer with 150 hidden neurons: ",
"2 Hiddent layer with 50 and 50 hidden neurons: ",
"2 Hiddent layer with 50 and 100 hidden neurons: ",
"2 Hiddent layer with 50 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: "),
mape,
collapse = "\n"))
cat("\n")
cat("SMAPE:\n")
cat(paste(c("1 Hiddent layer with 50 hidden neurons: ",
"1 Hiddent layer with 100 hidden neurons: ",
"1 Hiddent layer with 150 hidden neurons: ",
"2 Hiddent layer with 50 and 50 hidden neurons: ",
"2 Hiddent layer with 50 and 100 hidden neurons: ",
"2 Hiddent layer with 50 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 50 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 50 hidden neurons: ",
"3 Hiddent layer with 50, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 50, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 100 and 150 hidden neurons: ",
"3 Hiddent layer with 100, 150 and 150 hidden neurons: ",
"3 Hiddent layer with 150, 150 and 150 hidden neurons: "),
smape,
collapse = "\n"))
cat("\n")
#libraries
library(data.table)
library(tidyverse)
library(plotly)
library(caTools)
library(useful)
library(tictoc)
library(readxl)
library(neuralnet)
library(Metrics)
library(ggplot2)
#Read the data
uow_data <-  read_excel("uow_consumption.xlsx")
#summary(uow_data)
#print(uow_data)
#Rename the columns name
colnames(uow_data)[2] <- "6pm"
colnames(uow_data)[3] <- "7pm"
colnames(uow_data)[4] <- "8pm"
shifted_uow_data <- uow_data
shifted_uow_data <- shift.column(data = shifted_uow_data,
columns = "8pm",
len = 1,
up = FALSE,
newNames = c("t1_8pm"))
shifted_uow_data <- shift.column(data = shifted_uow_data,
columns = "8pm",
len = 2,
up = FALSE,
newNames = c("t2_8pm"))
shifted_uow_data <- shift.column(data = shifted_uow_data,
columns = "8pm",
len = 3,
up = FALSE,
newNames = c("t3_8pm"))
shifted_uow_data <- shift.column(data = shifted_uow_data,
columns = "8pm",
len = 4,
up = FALSE,
newNames = c("t4_8pm"))
shifted_uow_data <- shift.column(data = shifted_uow_data,
columns = "8pm",
len = 7,
up = FALSE,
newNames = c("t7_8pm"))
#z-score normalization
uow_data_scaled <- as.data.frame(shifted_uow_data %>% mutate_at(vars(-date), scale,
center=T))#Removing the date column
uow_data_scaled <- within(uow_data_scaled, rm(date))
#Creating logical vector that shows which samples are in training set
train <- rep(FALSE, nrow(uow_data_scaled))
train[1:380] <- TRUE
#Splitting the dataset into two parts, one is for train the data, and another is for testing.
train.data <- uow_data_scaled[train,] #For train the model
test.data <- uow_data_scaled[!train,] #For test the model
#View(train.data)
#names(train.data)
#test.data
#NN models training and results are store in a list
nn_models <- list()
#Using formula
formula.1 <- `8pm`~t1_8pm + t2_8pm + t3_8pm + t4_8pm + t7_8pm
time.start <- Sys.time()
nn_models[[1]] <- neuralnet(formula.1,
data = train.data,
hidden = c(50),#1 Hidden layer with 50 units
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training1 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[2]] <- neuralnet(formula.1,
data = train.data,
hidden = c(100),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training2 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[3]] <- neuralnet(formula.1,
data = train.data,
hidden = c(150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training3 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[4]] <- neuralnet(formula.1,
data = train.data,
hidden = c(50,50),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training4 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[5]] <- neuralnet(formula.1,
data = train.data,
hidden = c(100,100),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training5 <- time.end - time.start
#_________________________________________________________________
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[6]] <- neuralnet(formula.1,
data = train.data,
hidden = c(150,150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training6 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[7]] <- neuralnet(formula.1,
data = train.data,
hidden = c(100,100,100),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training7 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[8]] <- neuralnet(formula.1,
data = train.data,
hidden = c(150,150,150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training8 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[9]] <- neuralnet(formula.1,
data = train.data,
hidden = c(100),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training9 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[10]] <- neuralnet(formula.1,
data = train.data,
hidden = c(150,150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training10 <- time.end - time.start
#_________________________________________________________________
time.start <- Sys.time()
nn_models[[11]] <- neuralnet(formula.1,
data = train.data,
hidden = c(150,100,150),
linear.output = F,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
time.training11 <- time.end - time.start
#training scores for each nn model
train.scores <- sapply(nn_models, function(x) {min(x$result.matrix[c("error"),])})
#Print results
cat("Training Scores (Logarithmic Loss)\n with formula = `8pm`~t1_8pm + t2_8pm + t3_8pm + t4_8pm + t7_8pm \n")
cat(paste(c("1 Hidden Layer, 50 Hidden Units: ",
"1 Hidden Layer, 100 Hidden Units: ",
"1 Hidden Layer, 150 Hidden Units: ",
"2 Hidden Layers, 50 Hidden Units Each: ",
"2 Hidden Layers, 100 Hidden Units Each: ",
"2 Hidden Layers, 150 Hidden Units Each: ",
"3 Hidden Layers, 100 Hidden Units Each: ",
"3 Hidden Layers, 150 Hidden Units Each: ",
"3 Hidden Layers, 150 with softplus Hidden Units Each: ",
"\n1 Hidden Layers, 100 Hidden Units Each with tanh: ",
"2 Hidden Layers, 150 Hidden Units Each with tanh: ",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh: "
),
train.scores,
collapse = "\n"
)
)
cat("\n")
